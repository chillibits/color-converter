/*
 * Copyright Â© Marc Auberer 2017-2021. All rights reserved
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.mikepenz.aboutlibraries.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.mrgames13.jimdo.colorconverter"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 2701
        versionName "2.7.1"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    packagingOptions {
        pickFirst '**/META-INFMANIFEST.MF'
        pickFirst 'META-INF/library_release.kotlin_module'
    }
}

dependencies {
    // base dependencies
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'com.google.android.instantapps:instantapps:1.1.0'
    implementation 'com.google.android.play:core:1.10.2'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // External dependencies
    implementation 'net.margaritov.preference.colorpicker.ColorPickerPreference:ColorPickerPreference:1.0.0'
    implementation 'com.fxn769:pix:1.5.6'
    implementation 'com.github.skydoves:colorpickerview:2.2.3'
    implementation 'com.mikepenz:iconics-core:5.3.2'
    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.8-kotlin@aar'
    implementation 'com.github.javiersantos:MaterialStyledDialogs:3.0.2'
    implementation 'com.github.numerative:Five-Star-Me:2.1.1'

    // ChilliBits dependencies
    implementation 'com.chillibits:simplesettings:1.3.2'
    implementation 'com.chillibits:adobecolortool:1.0.3'

    // Room dependencies
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // dependencies for testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// Task for downloading all translation files
task downloadTranslations {
    group 'pre-build tasks'
    description 'Downloads all translation files when building the app.'

    ext.apiKey = 'IEKWn_DI-otivDlUWAN-NvNIT3bBWO_h'
    ext.apiKeyColors = 'ReBhdq025DTUFKoKIvmvLLyY6hznXyCg'

    // English
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values/strings.xml")
        new URL("https://localise.biz/api/export/locale/en.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file
        f = new File("${project.projectDir}/src/main/res/values/strings_colors.xml")
        new URL("https://localise.biz/api/export/locale/en.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    // French
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-fr/strings.xml")
        new URL("https://localise.biz/api/export/locale/fr.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file
        f = new File("${project.projectDir}/src/main/res/values-fr/strings_colors.xml")
        new URL("https://localise.biz/api/export/locale/fr.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    // German
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-de/strings.xml")
        new URL("https://localise.biz/api/export/locale/de.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file
        f = new File("${project.projectDir}/src/main/res/values-de/strings_colors.xml")
        new URL("https://localise.biz/api/export/locale/de.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    // Spanish
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-es/strings.xml")
        new URL("https://localise.biz/api/export/locale/es.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file
        f = new File("${project.projectDir}/src/main/res/values-es/strings_colors.xml")
        new URL("https://localise.biz/api/export/locale/es.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    // Russian
    doLast {
        // Main string file
        def f = new File("${project.projectDir}/src/main/res/values-ru/strings.xml")
        new URL("https://localise.biz/api/export/locale/ru.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file (will be added again, when the translation is complete)
        //f = new File("${project.projectDir}/src/main/res/values-ru/strings_colors.xml")
        //new URL("https://localise.biz/api/export/locale/ru.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    // Portuguese
    doLast {
        // Main string file
        //def f = new File("${project.projectDir}/src/main/res/values-pt/strings.xml")
        //new URL("https://localise.biz/api/export/locale/pt.xml?format=android&key=${apiKey}").withInputStream{ i -> f.withOutputStream{ it << i }}
        // Color file (will be added again, when the translation is complete)
        //def f = new File("${project.projectDir}/src/main/res/values-pt/strings_colors.xml")
        //new URL("https://localise.biz/api/export/locale/pt.xml?format=android&key=${apiKeyColors}").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}

preBuild.dependsOn downloadTranslations